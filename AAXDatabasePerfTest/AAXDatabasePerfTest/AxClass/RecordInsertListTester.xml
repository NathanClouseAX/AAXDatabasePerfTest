<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RecordInsertListTester</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RecordInsertListTester extends DatabaseInsertTester
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    //done - cannot use set operators on code table entities for some reason
    public static void main(Args _args)
    {
        RecordInsertListTester RecordInsertListTester = new RecordInsertListTester();

        RecordInsertListTester.parmWriteHistory(false);

        RecordInsertListTester.runCodeTable(1);

        RecordInsertListTester.runPrimaryTable(1);

        RecordInsertListTester.runTransactionTable(1);

        //RecordInsertListTester.runCodeDataEntity();

        RecordInsertListTester.runPrimaryDataEntity(1);

        RecordInsertListTester.runTransactionalDataEntity(1);

    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for table SalesPool
    /// </summary>
    public void runCodeTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        RecordInsertList SalesPoolList;
        SalesPoolList = new RecordInsertList(tableNum(SalesPool));
        SalesPool SalesPool;

        this.wipeCodeTable();

        this.startTimer();
        ttsbegin;
        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            SalesPool.SalesPoolId = int2Str(i);
            SalesPool.Name = int2Str(i);

            SalesPoolList.add(SalesPool);

        }
        SalesPoolList.insertDatabase();
        ttscommit;
        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::CodeTable);


    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrimaryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for Table CustTable
    /// </summary>
    public void runPrimaryTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        RecordInsertList CustTableList;
        CustTableList = new RecordInsertList(tableNum(CustTable));
        CustTable CustTable;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        CustGroup CustGroup;

        select * from CustGroup;

        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustAccount());

        this.startTimer();
        ttsbegin;

        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            
            CustTable.clear();
            CustTable.initValue();
            CustTable.Currency = Ledger::accountingCurrency(CompanyInfo.RecId);
            CustTable.CustGroup = CustGroup.CustGroup;
            CustTable.AccountNum = numberSeq.num();
            CustTableList.add(CustTable);
 
        }
        CustTableList.insertDatabase();

        ttscommit;

        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::PrimaryTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransactionTable</Name>
				<Source><![CDATA[
    public void runTransactionTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        RecordInsertList SalesTableList;
        SalesTableList = new RecordInsertList(tableNum(SalesTable));
        CustTable CustTable;
        SalesTable SalesTable;

        RecId custTableMaxRecId;
        RecId CustTableMinRecId;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        RandomGenerate RandomGenerate = RandomGenerate::construct();

        select maxof(RecId) from CustTable;
        custTableMaxRecId = CustTable.RecId - 1;

        select minof(RecId) from CustTable;
        CustTableMinRecId = CustTable.RecId - 1;

        numberSeq numberSeq;

        this.startTimer();
        ttsbegin;

        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {

            System.Random rando = new System.Random();

            int64 randomRecId = (rando.NextDouble() * int64Max() ) / 922337203685477581;

            select firstonly1 * from CustTable
                where CustTable.RecId >= randomRecId;

            if(!CustTable)
            {
                select firstonly1 * from CustTable;
            }

            SalesTable.clear();
            SalesTable.initValue();

            SalesTable.CustAccount = CustTable.AccountNum;
            SalesTable.initFromCustTable();

            numberSeq = NumberSeq::newGetNum(SalesParameters::numRefSalesId());
            numberSeq.used();
  
            salesTable.SalesId = numberSeq.num();

            SalesTableList.add(SalesTable);
        }

        SalesTableList.insertDatabase();
        ttscommit;

        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::TransactionTable);

    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity SalesOrderPoolEntity
    /// </summary>
    public void runCodeDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        RecordInsertList SalesPoolList;
        SalesPoolList = new RecordInsertList(tableNum(SalesOrderPoolEntity));
        SalesOrderPoolEntity SalesOrderPoolEntity;

        this.wipeCodeTable();

        this.startTimer();

        ttsbegin;

        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            SalesOrderPoolEntity.clear();
            SalesOrderPoolEntity.initValue();
            SalesOrderPoolEntity.PoolId = int2Str(i);
            SalesOrderPoolEntity.PoolName = int2Str(i);

            SalesPoolList.add(SalesOrderPoolEntity);
            
        }

        SalesPoolList.insertDatabase();
        ttscommit;
        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::CodeDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrimaryDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity CustCustomerV3Entity
    /// </summary>
    public void runPrimaryDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        RecordInsertList CustCustomerV3EntityList;
        CustCustomerV3EntityList = new RecordInsertList(tableNum(CustCustomerV3Entity));
        CustCustomerV3Entity CustCustomerV3Entity;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        CustGroup CustGroup;

        select * from CustGroup;

        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustAccount());

        this.startTimer();

        ttsbegin;
        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            CustCustomerV3Entity.clear();
            CustCustomerV3Entity.initValue();
            CustCustomerV3Entity.SalesCurrencyCode = Ledger::accountingCurrency(CompanyInfo.RecId);
            CustCustomerV3Entity.CustomerGroupId = CustGroup.CustGroup;
            CustCustomerV3Entity.SalesAccountNumber = numberSeq.num();
            CustCustomerV3Entity.OrganizationName = CustCustomerV3Entity.SalesAccountNumber;
            CustCustomerV3Entity.PartyType = "Organization";
            CustCustomerV3EntityList.add(CustCustomerV3Entity);
        }

        CustCustomerV3EntityList.insertDatabase();

        ttscommit;
        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::PrimaryDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransactionalDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity SalesOrderHeaderV2Entity
    /// </summary>
    public void runTransactionalDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);


        RecordInsertList SalesOrderHeaderV2EntityList;
        SalesOrderHeaderV2EntityList = new RecordInsertList(tableNum(SalesOrderHeaderV2Entity));
        CustTable CustTable;
        SalesOrderHeaderV2Entity SalesOrderHeaderV2Entity;

        RecId custTableMaxRecId;
        RecId CustTableMinRecId;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        RandomGenerate RandomGenerate = RandomGenerate::construct();

        select maxof(RecId) from CustTable;
        custTableMaxRecId = CustTable.RecId - 1;

        select minof(RecId) from CustTable;
        CustTableMinRecId = CustTable.RecId - 1;

        numberSeq numberSeq;

        this.startTimer();

        ttsbegin;
        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            
            this.stopTimer();

            System.Random rando = new System.Random();

            int64 randomRecId = (rando.NextDouble() * int64Max() ) / 922337203685477581;

            select firstonly1 * from CustTable
                where CustTable.RecId >= randomRecId;

            if(!CustTable)
            {
                select firstonly1 * from CustTable
                    where CustTable.AccountNum != '';
            }

            this.startTimer();

            SalesOrderHeaderV2Entity.clear();

            SalesOrderHeaderV2Entity.initValue();

            SalesOrderHeaderV2Entity.OrderingCustomerAccountNumber = CustTable.AccountNum;
            SalesOrderHeaderV2Entity.InvoiceCustomerAccountNumber = CustTable.AccountNum;

            SalesOrderHeaderV2Entity.SalesOrderName = CustTable.name();


            numberSeq = NumberSeq::newGetNum(SalesParameters::numRefSalesId());
            numberSeq.used();

            SalesOrderHeaderV2Entity.SalesOrderNumber = numberSeq.num();

            SalesOrderHeaderV2EntityList.add(SalesOrderHeaderV2Entity);
        }

        ttscommit;
        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::TransactionDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        DatabaseInsertTestType = DatabaseInsertTestType::RecordInsertListInsert;
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>