<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RecordInsertListTester</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RecordInsertListTester extends DatabaseInsertTester
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RecordInsertListTester RecordInsertListTester = new RecordInsertListTester();

        RecordInsertListTester.runCodeTable();

        RecordInsertListTester.runPrimaryTable();

        //MultiInsertTester.runTransactionTable();

        //MultiInsertTester.runCodeDataEntity();

        //MultiInsertTester.runPrimaryDataEntity();

        //MultiInsertTester.runTransactionalDataEntity();

    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for table SalesPool
    /// </summary>
    public void runCodeTable()
    {
        //setup
        this.parmRecordCount(SingleInsertTester::codeTableLoopCount);

        RecordInsertList SalesPoolList;
        SalesPoolList = new RecordInsertList(tableNum(SalesPool));
        SalesPool SalesPool;

        this.wipeCodeTable();

        this.startTimer();
        ttsbegin;
        //inline on purpose
        for(int i = 0; i <= SingleInsertTester::codeTableLoopCount; i++)
        {
            SalesPool.SalesPoolId = int2Str(i);
            SalesPool.Name = int2Str(i);

            SalesPoolList.add(SalesPool);

        }
        SalesPoolList.insertDatabase();
        ttscommit;
        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType::RecordInsertListInsert, DatabaseInsertWorkloadType::CodeTable);


    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrimaryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for Table CustTable
    /// </summary>
    public void runPrimaryTable()
    {
        //setup
        this.parmRecordCount(MultiInsertTester::primaryTableLoopCount);

        RecordInsertList CustTableList;
        CustTableList = new RecordInsertList(tableNum(CustTable));
        CustTable CustTable;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        CustGroup CustGroup;

        select * from CustGroup;

        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustAccount());

        this.startTimer();
        ttsbegin;

        //inline on purpose
        for(int i = 0; i <= this.parmRecordCount(); i++)
        {
            
            CustTable.clear();
            CustTable.initValue();
            CustTable.Currency = Ledger::accountingCurrency(CompanyInfo.RecId);
            CustTable.CustGroup = CustGroup.CustGroup;
            CustTable.AccountNum = numberSeq.num();
            CustTableList.add(CustTable);
 
        }
        CustTableList.insertDatabase();

        ttscommit;

        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType::RecordInsertListInsert, DatabaseInsertWorkloadType::PrimaryTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>