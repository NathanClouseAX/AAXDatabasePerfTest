<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MultiWriteTester</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class MultiWriteTester extends DatabaseUpdateTester
{
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <param name = "_args"></param>
    /// <summary>
    /// class to test Updateing records 1 per transaction in batches
    /// </summary>
    /// <param name = "_args"></param>
    public static void main(Args _args)
    {
        MultiUpdateTester MultiUpdateTester = new MultiUpdateTester();

        MultiUpdateTester.parmWriteHistory(false);

        MultiUpdateTester.runCodeTable(1);

        MultiUpdateTester.runPrimaryTable(1);

        MultiUpdateTester.runTransactionTable(1);

        MultiUpdateTester.runCodeDataEntity(1);

        MultiUpdateTester.runPrimaryDataEntity(1);

        MultiUpdateTester.runTransactionalDataEntity(1);

    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for table SalesPool
    /// </summary>
    public void runCodeTable(int _recordCount = 0)
    {
        //setup
        int i = 0;
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);
        SalesPool SalesPool;


        //confirm we have at least _recordcount
        this.fillCodeTable(_recordCount);

        //inline on purpose
        
        this.startTimer();
        ttsbegin;
        while select forupdate * from SalesPool
        {
            SalesPool.Name = int2Str(new Random().nextInt());
            SalesPool.write();
            

            if(i >= this.parmRecordCount())
            {
                break;
            }
        }

        ttsbegin;
        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::CodeTable);


    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrimaryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for Table CustTable
    /// </summary>
    public void runPrimaryTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);

        int i = 0;

        CustTable CustTable;

        this.fillPrimaryTable(_recordCount);

        this.startTimer();

        //inline on purpose
        while select forupdate * from CustTable
        {
            ttsbegin;
            CustTable.CreditMax = new Random().nextInt();
            CustTable.write();
            ttscommit;

            i++;

            if(i >= _recordCount)
            {
                break;
            }
        }

        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::PrimaryTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// test for Table SalesTable
    /// </summary>
    public void runTransactionTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);

        SalesTable SalesTable;

        int i = 0;

        this.startTimer();

        //inline on purpose
        while select forupdate SalesTable
        {
            ttsbegin;
            SalesTable.SalesName = guid2Str(newGuid());
            SalesTable.write();
            ttscommit;

            i++;
            if(i >= _recordCount)
            {
                break;
            }
        }

        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::TransactionTable);

    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity SalesOrderPoolEntity
    /// </summary> 
    public void runCodeDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);

        SalesOrderPoolEntity SalesOrderPoolEntity;

        int i = 0;

        this.fillCodeTable(_recordCount);

        this.startTimer();

        while select forupdate SalesOrderPoolEntity
        {
            ttsbegin;
            SalesOrderPoolEntity.PoolName = guid2Str(newGuid());
            SalesOrderPoolEntity.write();
            ttscommit;

            i++;

            if(i >= _recordCount)
            {
                break;
            }
        }

        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::CodeDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrimaryDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity CustCustomerV3Entity
    /// </summary>
    public void runPrimaryDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);

        CustCustomerV3Entity CustCustomerV3Entity;

        int i = 0;

        CompanyInfo CompanyInfo = CompanyInfo::find();
        CustGroup CustGroup;

        select * from CustGroup;

        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustAccount());

        this.startTimer();

        while select forupdate CustCustomerV3Entity
        {
            ttsbegin;
            CustCustomerV3Entity.CreditLimit = new Random().nextInt();
            CustCustomerV3Entity.write();
            ttscommit;

            i++;

            if(i >= _recordCount)
            {
                break;
            }
        }

        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::PrimaryDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransactionalDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for data entity SalesOrderHeaderV2Entity
    /// </summary>
    public void runTransactionalDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? MultiUpdateTester::codeTableLoopCount : _recordCount);

        SalesOrderHeaderV2Entity SalesOrderHeaderV2Entity;

        int i = 0;

        this.startTimer();

        while select forupdate SalesOrderHeaderV2Entity
        {
            ttsbegin;
            SalesOrderHeaderV2Entity.SalesOrderName = guid2Str(newguid());
            SalesOrderHeaderV2Entity.write();
            ttscommit;

            i++;
            if(i >= _recordCount)
            {
                break;
            }
        }

        this.stopTimer();

        this.writeRunHistory(DatabaseUpdateTestType, DatabaseWorkloadType::TransactionDataEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        DatabaseUpdateTestType = DatabaseUpdateTestType::SingleUpdate;
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>