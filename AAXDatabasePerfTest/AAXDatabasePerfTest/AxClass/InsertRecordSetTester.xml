<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InsertRecordSetTester</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InsertRecordSetTester extends DatabaseInsertTester
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    //done - can only insert from select, not a good fit for primary and transactional workloads
    public static void main(Args _args)
    {
        InsertRecordSetTester InsertRecordSetTester = new InsertRecordSetTester();

        InsertRecordSetTester.parmWriteHistory(false);

        InsertRecordSetTester.runCodeTable(1);

        InsertRecordSetTester.runCodeDataEntity(1);


    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for table SalesPool
    /// </summary>
    public void runCodeTable(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeTableLoopCount : _recordCount);

        SalesPool SalesPool;
        tmpSalesPool tmpSalesPool;

        this.wipeCodeTable();
        this.filltmpCodeTable();

        this.startTimer();

        //records already created in tmpSalesPool, just measuring time cost to get from there to target
        ttsbegin;
        insert_recordset SalesPool (SalesPoolId, Name)
            select SalesPoolId, Name from tmpSalesPool;

        ttscommit;
        

        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::CodeTable);


    }

]]></Source>
			</Method>
			<Method>
				<Name>runCodeDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Test for table SalesPool
    /// </summary>
    public void runCodeDataEntity(int _recordCount = 0)
    {
        //setup
        this.parmRecordCount(_recordCount == 0 ? SingleInsertTester::codeDataEntityLoopCount : _recordCount);

        SalesOrderPoolEntity SalesOrderPoolEntity;
        tmpSalesPool tmpSalesPool;

        this.wipeCodeTable();
        this.filltmpCodeTable();

        this.startTimer();

        //records already created in tmpSalesPool, just measuring time cost to get from there to target
        ttsbegin;
        insert_recordset SalesOrderPoolEntity (PoolId, PoolName)
            select SalesPoolId, Name from tmpSalesPool;

        ttscommit;
        

        this.stopTimer();

        this.writeRunHistory(DatabaseInsertTestType, DatabaseWorkloadType::CodeDataEntity);


    }

]]></Source>
			</Method>
			<Method>
				<Name>wipeCodeTable</Name>
				<Source><![CDATA[
    public void wipeCodeTable()
    {
        SalesPool salesPool;

        UserConnection                  userConnection;
        Statement                       statement;
        str                             sqlStatement;
        SqlSystem                       sqlSystem;
        SqlStatementExecutePermission   sqlPermission;

        sqlSystem = new SqlSystem();
 
        sqlStatement = 'delete from salespool'; //this is bad, there appears to be a bug related to RecIds

        userConnection = new UserConnection();
        statement      = userConnection.createStatement();

        sqlPermission = new SqlStatementExecutePermission(sqlStatement);
 
        sqlPermission.assert();
 
        statement.executeUpdate(sqlStatement);
 
        CodeAccessPermission::revertAssert();

        //super();

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void new()
    {
        DatabaseInsertTestType = DatabaseInsertTestType::InsertRecordsetInsert;
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>